return {}

---local map = vim.keymap.set
---
---local disable_completion = function()
---  local cmp = require("cmp")
---  if cmp.get_config().completion.autocomplete then
---    cmp.setup.buffer({
---      completion = {
---        autocomplete = false,
---      },
---    })
---    cmp.abort()
---  end
---  LazyVim.info("Autocomplete disabled")
---end
---local disable_copilot = function()
---  local copilot = require("copilot.suggestion")
---  if copilot.is_visible() then
---    copilot.dismiss()
---  end
---  ---@diagnostic disable-next-line: inject-field
---  vim.b.copilot_suggestion_auto_trigger = false
---  LazyVim.info("Copilot disabled")
---end
---return {
---  -- {
---  --   "NvChad/nvim-colorizer.lua",
---  --   -- event = "LazyFile",
---  --   cmd = { "ColorizerToggle" },
---  --   opts = {
---  --     -- user_default_options = {
---  --     --   tailwind = true,
---  --     -- },
---  --   },
---  --   main = "colorizer",
---  -- },
---
---  -- {
---  --   "j-hui/fidget.nvim",
---  --   opts = {},
---  --   event = LazyFile,
---  -- },
---  -- {
---  --   "ray-x/lsp_signature.nvim",
---  --   event = LazyFile,
---  --   opts = {
---  --     floating_window = false,
---  --     toggle_key_flip_floatwin_setting = true,
---  --   },
---  -- },
---
---  -- {
---  --   "rcarriga/nvim-notify",
---  --   keys = {},
---  --   opts = {
---  --     timeout = 3000,
---  --     max_height = function()
---  --       return math.floor(vim.o.lines * 0.75)
---  --     end,
---  --     max_width = function()
---  --       return math.floor(vim.o.columns * 0.75)
---  --     end,
---  --     on_open = function(win)
---  --       vim.api.nvim_win_set_config(win, { zindex = 100 })
---  --     end,
---  --   },
---  --   -- init = function()
---  --   --   -- when noice is not enabled, install notify on VeryLazy
---  --   --   if not LazyVim.has("noice.nvim") then
---  --   --     LazyVim.on_very_lazy(function()
---  --   --       vim.notify = require("notify")
---  --   --     end)
---  --   --   end
---  --   -- end,
---  -- },
---
---  -- Highly experimental plugin that completely replaces the UI for messages, cmdline and the popupmenu.
---  {
---    -- dir = "~/personal/noice.nvim",
---    "folke/noice.nvim",
---    event = "VeryLazy",
---    opts = {
---      views = {
---        hover = {
---          border = {
---            style = "rounded",
---            padding = { 0, 1 },
---          },
---          size = {
---            max_width = 80,
---          },
---          position = { row = 2, col = 2 },
---        },
---      },
---      lsp = {
---        override = {
---          ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
---          ["vim.lsp.util.stylize_markdown"] = true,
---          ["cmp.entry.get_documentation"] = true,
---        },
---        hover = {
---          -- view = "split",
---        },
---      },
---      routes = {
---        {
---          filter = {
---            any = {
---              { find = "No information available" },
---            },
---          },
---          skip = true,
---        },
---        {
---          filter = {
---            event = "msg_show",
---            any = {
---              { find = "%d+L, %d+B" },
---              { find = "; after #%d+" },
---              { find = "; before #%d+" },
---              { find = "%d+ fewer lines" },
---            },
---          },
---          view = "mini",
---        },
---      },
---      presets = {
---        bottom_search = true, -- use a classic bottom cmdline for search
---        command_palette = false, -- position the cmdline and popupmenu together
---        long_message_to_split = true, -- long messages will be sent to a split
---        inc_rename = false, -- enables an input dialog for inc-rename.nvim
---        lsp_doc_border = true, -- add a border to hover docs and signature help
---      },
---      cmdline = {
---        enabled = true,
---        view = "cmdline",
---      },
---      messages = {
---        enabled = true,
---        view = "mini",
---        view_warn = "mini",
---        view_error = "mini",
---        -- view_history = "messages",
---        -- view = "notify",
---        -- view_error = "messages", -- view for errors
---        -- view_warn = "messages", -- view for warnings
---        -- view_history = "messages", -- view for :messages
---        -- view_search = "virtualtext", -- view for search count messages. Set to `false` to disable
---      },
---      -- popupmenu = {
---      --   enabled = false,
---      -- },
---      notify = {
---        enabled = true,
---        view = "mini",
---      },
---      --
---      commands = {
---        all = {
---          view = "split",
---          opts = { enter = true, format = "details" },
---          filter = {},
---        },
---      },
---    },
---    -- stylua: ignore
---    keys = {
---      {
---        "<S-Enter>",
---        function() require("noice").redirect(vim.fn.getcmdline()) end,
---        mode = "c",
---        desc = "Redirect Cmdline"
---      },
---      { "<leader>nn", function() require("noice").cmd("last") end,    desc = "Noice Last Message" },
---      { "<leader>nl", function() require("noice").cmd("history") end, desc = "Noice History" },
---      { "<leader>na", function() require("noice").cmd("all") end,     desc = "Noice All" },
---      { "<leader>nm", [[<cmd>messages<cr>]],                          desc = "messages" },
---      { "<leader>nd", function() require("noice").cmd("dismiss") end, desc = "Dismiss All" },
---      {
---        "<c-f>",
---        function() if not require("noice.lsp").scroll(4) then return "<c-f>" end end,
---        silent = true,
---        expr = true,
---        desc = "Scroll forward",
---        mode = { "i", "n", "s" }
---      },
---      {
---        "<c-b>",
---        function() if not require("noice.lsp").scroll(-4) then return "<c-b>" end end,
---        silent = true,
---        expr = true,
---        desc = "Scroll backward",
---        mode = { "i", "n", "s" }
---      },
---    },
---    config = function(_, opts)
---      require("noice").setup(opts)
---      vim.api.nvim_set_hl(0, "LspSignatureActiveParameter", { link = "@type.builtin", default = true })
---      vim.api.nvim_set_hl(0, "NoiceVirtualText", { fg = "#c8d3f5", bg = "#3e68d7", italic = true })
---    end,
---  },
---
---  -- git signs highlights text that has changed since the list
---  -- git commit, and also lets you interactively stage & unstage
---  -- hunks in a commit.
---  {
---    "lewis6991/gitsigns.nvim",
---    event = "LazyFile",
---    opts = {
---      on_attach = function(buffer)
---        local gs = package.loaded.gitsigns
---
---        local function map(mode, l, r, desc)
---          vim.keymap.set(mode, l, r, { buffer = buffer, desc = desc })
---        end
---
---        -- stylua: ignore start
---        map("n", "]c", gs.next_hunk, "Next Hunk")
---        map("n", "[c", gs.prev_hunk, "Prev Hunk")
---        map({ "n", "v" }, "<leader>ghs", ":Gitsigns stage_hunk<CR>", "Stage Hunk")
---        map({ "n", "v" }, "<leader>ghr", ":Gitsigns reset_hunk<CR>", "Reset Hunk")
---        map("n", "<leader>ghS", gs.stage_buffer, "Stage Buffer")
---        map("n", "<leader>ghu", gs.undo_stage_hunk, "Undo Stage Hunk")
---        map("n", "<leader>ghR", gs.reset_buffer, "Reset Buffer")
---        map("n", "<leader>ghp", gs.preview_hunk, "Preview Hunk")
---        map("n", "<leader>ki", gs.preview_hunk, "Preview Hunk")
---        map("n", "<leader>ku", gs.reset_hunk, "Reset Hunk")
---        map("n", "<leader>ghb", function() gs.blame_line({ full = true }) end, "Blame Line")
---        map("n", "<leader>ghd", gs.diffthis, "Diff This")
---        map("n", "<leader>ghD", function() gs.diffthis("~") end, "Diff This ~")
---        map({ "o", "x" }, "ih", ":<C-U>Gitsigns select_hunk<CR>", "GitSigns Select Hunk")
---      end,
---    },
---  },
---  -- {
---  --   "smjonas/inc-rename.nvim",
---  --   opts = {
---  --     input_buffer_type = "dressing",
---  --   }
---  -- },
---
---  -- better diagnostics list and others
---  {
---    "folke/trouble.nvim",
---    cmd = { "TroubleToggle", "Trouble" },
---    opts = { use_diagnostic_signs = true },
---    keys = {
---      { "<leader>xs", "<cmd>TroubleToggle document_diagnostics<cr>", desc = "Document Diagnostics (Trouble)" },
---      { "<leader>xa", "<cmd>TroubleToggle workspace_diagnostics<cr>", desc = "Workspace Diagnostics (Trouble)" },
---      { "<leader>xl", "<cmd>TroubleToggle loclist<cr>", desc = "Location List (Trouble)" },
---      { "<leader>xq", "<cmd>TroubleToggle quickfix<cr>", desc = "Quickfix List (Trouble)" },
---      { "<C-.>", "]q", desc = "Next Trouble/Quickfix Item", remap = true },
---      { "<C-,>", "[q", desc = "Previous Trouble/Quickfix Item", remap = true },
---      {
---        "<M-x>",
---        "<cmd>Trouble diagnostics toggle filter.severity=vim.diagnostic.severity.ERROR<cr>",
---        desc = "Diagnostics (Trouble)",
---      },
---      { "<M-.>", "]q", desc = "Next Trouble/Quickfix Item", remap = true },
---      { "<M-,>", "[q", desc = "Previous Trouble/Quickfix Item", remap = true },
---      {
---        "[q",
---        function()
---          if require("trouble").is_open() then
---            require("trouble").prev({ skip_groups = true, jump = true })
---          else
---            local ok, err = pcall(vim.cmd.cprev)
---            if not ok then
---              vim.notify(err, vim.log.levels.ERROR)
---            end
---          end
---        end,
---        desc = "Previous Trouble/Quickfix Item",
---      },
---      {
---        "]q",
---        function()
---          if require("trouble").is_open() then
---            require("trouble").next({ skip_groups = true, jump = true })
---          else
---            local ok, err = pcall(vim.cmd.cnext)
---            if not ok then
---              vim.notify(err, vim.log.levels.ERROR)
---            end
---          end
---        end,
---        desc = "Next Trouble/Quickfix Item",
---      },
---    },
---  },
---
---  -- snippets
---  {
---    "L3MON4D3/LuaSnip",
---    lazy = true,
---    build = (not jit.os:find("Windows"))
---        and "echo 'NOTE: jsregexp is optional, so not a big deal if it fails to build'; make install_jsregexp"
---      or nil,
---    cmd = { "LuaSnipEdit" },
---    dependencies = {
---      -- "rafamadriz/friendly-snippets",
---      -- config = function()
---      --   require("luasnip.loaders.from_vscode").lazy_load()
---      -- end,
---    },
---    opts = function()
---      vim.api.nvim_create_user_command("LuaSnipEdit", function()
---        require("luasnip.loaders").edit_snippet_files({
---          extend = function(ft, paths)
---            if ft == "" then
---              ft = "all"
---            end
---            if #paths == 0 then
---              return {
---                {
---                  vim.fn.stdpath("config") .. "/snippets/" .. ft .. ".snippets",
---                  vim.fn.stdpath("config") .. "/snippets/" .. ft .. ".lua",
---                  -- "$CONFIG/" .. ft .. ".snippets",
---                },
---              }
---            end
---
---            return {}
---          end,
---        })
---      end, {})
---
---      return {
---        history = true,
---        delete_check_events = "TextChanged",
---        update_events = "TextChanged,TextChangedI",
---      }
---    end,
---    config = function(_, opts)
---      require("luasnip").setup(opts)
---      local paths = { "./snippets" }
---      require("luasnip.loaders.from_snipmate").lazy_load({ paths = paths })
---      require("luasnip.loaders.from_lua").lazy_load({ paths = paths })
---      vim.api.nvim_create_user_command("LuaSnipClear", function()
---        require("luasnip").session.current_nodes[vim.api.nvim_get_current_buf()] = nil
---      end, {})
---    end,
---    keys = function()
---      return {
---        -- <c-h> to disable completion & copilot
---        -- <c-l> to re-enable completion & copilot
---        { "<C-h><C-c>", disable_completion, mode = "i" },
---        { "<C-h><C-l>", disable_completion, mode = "i" },
---        { "<leader>uc", disable_completion, mode = "n" },
---        { "<C-h><C-h>", disable_copilot, mode = "i" },
---        { "<C-h>", disable_copilot, mode = "i" },
---        { "<C-l>", require("luasnip").select_keys, mode = "x" }, -- expand visual selection
---        { -- manually expand snippet
---          "<C-l>",
---          function()
---            local ls = require("luasnip")
---            local copilot = require("copilot.suggestion")
---            -- local cmp = require("cmp")
---            if ls.choice_active() then
---              ls.change_choice(1)
---            elseif ls.expandable() then
---              ls.expand()
---            -- elseif copilot.is_visible() then
---            --   copilot.accept_line()
---            else
---              -- if not cmp.get_config().completion.autocomplete then
---              --   cmp.setup.buffer({
---              --     completion = {
---              --       autocomplete = { cmp.TriggerEvent.TextChanged, cmp.TriggerEvent.InsertEnter },
---              --     },
---              --   })
---              --   cmp.complete()
---              --   LazyVim.info("Copilot & Autocomplete enabled")
---              -- end
---              LazyVim.info("Copilot enabled")
---              -- force copilot request
---              ---@diagnostic disable-next-line: inject-field
---              vim.b.copilot_suggestion_auto_trigger = true
---              copilot.next()
---            end
---          end,
---          mode = "i",
---        },
---        -- -- stylua: ignore
---        -- { "<C-j>", function() require("luasnip").jump(1) end,  mode = { "i", "s" } },
---        -- -- stylua: ignore
---        -- { "<C-k>", function() require("luasnip").jump(-1) end, mode = { "i", "s" } },
---      }
---    end,
---  },
---
---  { "garymjr/nvim-snippets", enabled = false },
---  {
---    "saghen/blink.cmp",
---    enabled = false,
---    optional = true,
---  },
---  {
---    "hrsh7th/nvim-cmp",
---    version = false, -- last release is way too old
---    enabled = true,
---    event = "InsertEnter",
---    dependencies = {
---      "hrsh7th/cmp-nvim-lsp",
---      "hrsh7th/cmp-buffer",
---      "hrsh7th/cmp-path",
---      "hrsh7th/cmp-cmdline",
---      "saadparwaiz1/cmp_luasnip",
---      { "petertriho/cmp-git", opts = {} },
---      "L3MON4D3/LuaSnip",
---      -- "zbirenbaum/copilot.lua",
---      -- "hrsh7th/cmp-nvim-lsp-signature-help",
---    },
---    keys = {
---      { "<Tab>", false, mode = { "i", "s" } },
---      { "<S-Tab>", false, mode = { "i", "s" } },
---      { "<leader>uc", disable_completion, desc = "toggle autocomplete" },
---    },
---    opts = function(_, opts)
---      local cmp = require("cmp")
---      local ls = require("luasnip")
---      local copilot = require("copilot.suggestion")
---      -- local defaults = require("cmp.config.default")()
---      opts.experimental = {}
---
---      opts.snippet = {
---        expand = function(args)
---          require("luasnip").lsp_expand(args.body)
---        end,
---      }
---
---      opts.mapping["<tab>"] = false
---      -- opts.completion.autocomplete = true
---      opts.mapping = cmp.mapping.preset.insert({
---        ["<C-j>"] = function()
---          if cmp.visible() then
---            cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
---          elseif ls.jumpable(1) then
---            ls.jump(1)
---          elseif copilot.is_visible() then
---            copilot.prev()
---          else
---            -- vim.fn.feedkeys("<C-j>", "n")
---          end
---        end,
---        ["<C-k>"] = function()
---          if cmp.visible() then
---            cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
---          elseif ls.jumpable(-1) then
---            ls.jump(-1)
---          elseif copilot.is_visible() then
---            copilot.prev()
---          else
---            -- vim.fn.feedkeys("<C-k>", "n")
---          end
---        end,
---        ["<C-b>"] = cmp.mapping.scroll_docs(-4),
---        ["<C-f>"] = cmp.mapping.scroll_docs(4),
---        ["<C-Space>"] = cmp.mapping.complete(),
---        -- ["<C-e>"] = cmp.mapping.abort(),
---        ["<C-e>"] = function(fallback)
---          if cmp.visible() then
---            cmp.abort()
---          elseif copilot.is_visible() then
---            copilot.accept()
---          else
---            -- vim.fn.feedkeys("<C-e>", "i")
---          end
---        end,
---        ["<CR>"] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
---        ["<C-CR>"] = function(fallback)
---          cmp.abort()
---          fallback()
---        end,
---        ["<S-CR>"] = function(fallback)
---          cmp.abort()
---          fallback()
---        end,
---        -- ["<S-CR>"] = cmp.mapping.confirm({
---        --   behavior = cmp.ConfirmBehavior.Replace,
---        --   select = true, -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
---        -- }),
---      })
---
---      opts.sources = cmp.config.sources({
---        -- { name = "nvim_lsp_signature_help" },
---        { name = "nvim_lsp" },
---        { name = "luasnip" },
---        { name = "path" },
---        { name = "git" },
---      }, {
---        { name = "buffer" },
---      })
---
---      local compare = require("cmp.config.compare")
---      opts.sorting = {
---        priority_weight = 10,
---        comparators = {
---          compare.offset,
---          compare.exact,
---          compare.score,
---          -- compare.recently_used,
---          function(entry1, entry2)
---            local _, entry1_under = entry1.completion_item.label:find("^_+")
---            local _, entry2_under = entry2.completion_item.label:find("^_+")
---            entry1_under = entry1_under or 0
---            entry2_under = entry2_under or 0
---            if entry1_under > entry2_under then
---              return false
---            elseif entry1_under < entry2_under then
---              return true
---            end
---          end,
---          compare.order,
---          compare.kind,
---          compare.sort_text,
---          compare.length,
---          compare.order,
---        },
---      }
---
---      -- return {
---      --   completion = {
---      --     completeopt = "menu,menuone,noinsert",
---      --     autocomplete = false,
---      --   },
---      --   preselect = cmp.PreselectMode.None,
---      --   snippet = {
---      --     expand = function(args)
---      --       require("luasnip").lsp_expand(args.body)
---      --     end,
---      --   },
---      --   mapping = cmp.mapping.preset.insert({
---      --     ["<C-j>"] = function()
---      --       if cmp.visible() then
---      --         cmp.select_next_item({ behavior = cmp.SelectBehavior.Select })
---      --       elseif ls.jumpable(1) then
---      --         ls.jump(1)
---      --       elseif copilot.is_visible() then
---      --         copilot.prev()
---      --       else
---      --         -- vim.fn.feedkeys("<C-j>", "n")
---      --       end
---      --     end,
---      --     ["<C-k>"] = function()
---      --       if cmp.visible() then
---      --         cmp.select_prev_item({ behavior = cmp.SelectBehavior.Select })
---      --       elseif ls.jumpable(-1) then
---      --         ls.jump(-1)
---      --       elseif copilot.is_visible() then
---      --         copilot.prev()
---      --       else
---      --         -- vim.fn.feedkeys("<C-k>", "n")
---      --       end
---      --     end,
---      --     ["<C-b>"] = cmp.mapping.scroll_docs(-4),
---      --     ["<C-f>"] = cmp.mapping.scroll_docs(4),
---      --     ["<C-Space>"] = cmp.mapping.complete(),
---      --     -- ["<C-e>"] = cmp.mapping.abort(),
---      --     ["<C-e>"] = function(fallback)
---      --       if cmp.visible() then
---      --         cmp.abort()
---      --       elseif copilot.is_visible() then
---      --         copilot.accept()
---      --       else
---      --         -- vim.fn.feedkeys("<C-e>", "i")
---      --       end
---      --     end,
---      --     ["<CR>"] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
---      --     ["<C-CR>"] = cmp.mapping.confirm({
---      --       behavior = cmp.ConfirmBehavior.Replace,
---      --       select = true,
---      --     }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
---      --     ["<S-CR>"] = function(fallback)
---      --       cmp.abort()
---      --       fallback()
---      --     end,
---      --   }),
---      --   sources = cmp.config.sources({
---      --     -- { name = "nvim_lsp_signature_help" },
---      --     { name = "nvim_lsp" },
---      --     { name = "luasnip" },
---      --     { name = "path" },
---      --     { name = "git" },
---      --   }, {
---      --     { name = "buffer" },
---      --   }),
---      --   formatting = {
---      --     format = function(entry, item)
---      --       local icons = LazyVim.config.icons.kinds
---      --       if icons[item.kind] then
---      --         item.kind = icons[item.kind] .. item.kind
---      --       end
---      --
---      --       local widths = {
---      --         abbr = vim.g.cmp_widths and vim.g.cmp_widths.abbr or 40,
---      --         menu = vim.g.cmp_widths and vim.g.cmp_widths.menu or 30,
---      --       }
---      --
---      --       for key, width in pairs(widths) do
---      --         if item[key] and vim.fn.strdisplaywidth(item[key]) > width then
---      --           item[key] = vim.fn.strcharpart(item[key], 0, width - 1) .. "…"
---      --         end
---      --       end
---      --
---      --       return item
---      --     end,
---      --   },
---      --   -- experimental = {
---      --   --   ghost_text = {
---      --   --     hl_group = "CmpGhostText",
---      --   --   },
---      --   -- },
---      --   sorting = defaults.sorting,
---      -- }
---    end,
---    -- ---@param opts cmp.ConfigSchema
---    -- config = function(_, opts)
---    --   for _, source in ipairs(opts.sources) do
---    --     source.group_index = source.group_index or 1
---    --   end
---    --   require("cmp").setup(opts)
---    -- end,
---    main = "lazyvim.util.cmp",
---    config = function(_, opts)
---      LazyVim.cmp.setup(opts)
---
---      local cmp = require("cmp")
---      -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
---      cmp.setup.cmdline({ "/", "?" }, {
---        mapping = cmp.mapping.preset.cmdline(),
---        sources = {
---          { name = "buffer" },
---        },
---      })
---
---      -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
---      cmp.setup.cmdline(":", {
---        mapping = cmp.mapping.preset.cmdline(),
---        sources = cmp.config.sources({
---          { name = "path" },
---        }, {
---          { name = "cmdline" },
---        }),
---        matching = { disallow_symbol_nonprefix_matching = false },
---      })
---    end,
---  },
----- }
