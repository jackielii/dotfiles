# ( vim: set ts=4 sw=4 et fdm=marker: )
# keys: https://github.com/koekeishiya/skhd/issues/1#issue-248494406
# example: https://github.com/koekeishiya/skhd/blob/master/examples/skhdrc
#
# {{{ README
# Usage:
# -V | --verbose: Output debug information
#     skhd -V
#
# -P | --profile: Output profiling information
#     skhd -P
#
# -v | --version: Print version number to stdout
#     skhd -v
#
# -c | --config: Specify location of config file
#     skhd -c ~/.skhdrc
#
# -o | --observe: Output keycode and modifiers of event. Ctrl+C to quit
#     skhd -o
#
# -r | --reload: Signal a running instance of skhd to reload its config file
#     skhd -r
#
# -h | --no-hotload: Disable system for hotloading config file
#     skhd -h
#
# -k | --key: Synthesize a keypress (same syntax as when defining a hotkey)
#     skhd -k "shift + alt - 7"
#
# -t | --text: Synthesize a line of text
#     skhd -t "hello, worldã‚·"
#
#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.
##############################################################################
# modifiers (<mod>):
# fn
#
# cmd
# lcmd
# rcmd
#
# shift
# lshift
# rshift
#
# alt
# lalt
# ralt
#
# ctrl
# lctrl
# rctrl
#
# hyper (cmd + shift + alt + ctrl)
#
# meh (shift + alt + ctrl)
##############################################################################
# Key literals
# "return"     (kVK_Return)
# "tab"        (kVK_Tab)
# "space"      (kVK_Space)
# "backspace"  (kVK_Delete)
# "escape"     (kVK_Escape)
#
# The following keys can not be used with the fn-modifier:
#
# "delete"     (kVK_ForwardDelete)
# "home"       (kVK_Home)
# "end"        (kVK_End)
# "pageup"     (kVK_PageUp)
# "pagedown"   (kVK_PageDown)
# "insert"     (kVK_Help)
# "left"       (kVK_LeftArrow)
# "right"      (kVK_RightArrow)
# "up"         (kVK_UpArrow)
# "down"       (kVK_DownArrow)
# "f1"         (kVK_F1)
# "f2"         (kVK_F2)
# "f3"         (kVK_F3)
# "f4"         (kVK_F4)
# "f5"         (kVK_F5)
# "f6"         (kVK_F6)
# "f7"         (kVK_F7)
# "f8"         (kVK_F8)
# "f9"         (kVK_F9)
# "f10"        (kVK_F10)
# "f11"        (kVK_F11)
# "f12"        (kVK_F12)
# "f13"        (kVK_F13)
# "f14"        (kVK_F14)
# "f15"        (kVK_F15)
# "f16"        (kVK_F16)
# "f17"        (kVK_F17)
# "f18"        (kVK_F18)
# "f19"        (kVK_F19)
# "f20"        (kVK_F20)
#
# "sound_up"          (NX_KEYTYPE_SOUND_UP)
# "sound_down"        (NX_KEYTYPE_SOUND_DOWN)
# "mute"              (NX_KEYTYPE_MUTE)
# "play"              (NX_KEYTYPE_PLAY)
# "previous"          (NX_KEYTYPE_PREVIOUS)
# "next"              (NX_KEYTYPE_NEXT)
# "rewind"            (NX_KEYTYPE_REWIND)
# "fast"              (NX_KEYTYPE_FAST)
# "brightness_up"     (NX_KEYTYPE_BRIGHTNESS_UP)
# "brightness_down"   (NX_KEYTYPE_BRIGHTNESS_DOWN)
# "illumination_up"   (NX_KEYTYPE_ILLUMINATION_UP)
# "illumination_down" (NX_KEYTYPE_ILLUMINATION_DOWN)
# }}}

.SHELL "/bin/dash"

# focus cmd - ? {{{
lcmd - h : yabai -m window --focus west || yabai -m display --focus west || yabai -m display --focus recent
lcmd - j : yabai -m window --focus stack.next || yabai -m window --focus south || yabai -m display --focus south || yabai -m window --focus stack.first
lcmd - k : yabai -m window --focus stack.prev || yabai -m window --focus north || yabai -m display --focus north || yabai -m window --focus stack.last
lcmd - l : yabai -m window --focus east || yabai -m display --focus east || yabai -m display --focus mouse

cmd + ctrl - h : yabai -m space --focus prev
# cmd + ctrl - j : yabai -m window --insert south
# cmd + ctrl - k : yabai -m window --insert north
cmd + ctrl - l : yabai -m space --focus next

# cmd - h : yabai -m window --focus west \
#     || yabai -m display --focus west \
#     || yabai -m window --focus $( \
#         (yabai -m query --spaces --space next) \
#             | jq -re '.[] | select(."is-visible" == true)."last-window"')
# cmd - l : yabai -m window --focus east \
#     || yabai -m display --focus east \
#     || yabai -m window --focus $( \
#         (yabai -m query --spaces --display) \
#             | jq -re '.[] | select(."is-visible" == true)."first-window"')

# cmd + number is used in many applications. I have to get used to using ctrl
lcmd - 1 : yabai -m space --focus 1
lcmd - 2 : yabai -m space --focus 2
lcmd - 3 : yabai -m space --focus 3
lcmd - 4 : yabai -m space --focus 4
lcmd - 5 : yabai -m space --focus 5
lcmd - 6 : yabai -m space --focus 6
lcmd - 7 : yabai -m space --focus 7
lcmd - 8 : yabai -m space --focus 8
lcmd - 9 : yabai -m space --focus 9

# cmd + ctrl - 1 : yabai -m space --focus 1
# cmd + ctrl - 2 : yabai -m space --focus 2
# cmd + ctrl - 3 : yabai -m space --focus 3
# cmd + ctrl - 4 : yabai -m space --focus 4
# cmd + ctrl - 5 : yabai -m space --focus 5
# cmd + ctrl - 6 : yabai -m space --focus 6
# cmd + ctrl - 7 : yabai -m space --focus 7
# cmd + ctrl - 8 : yabai -m space --focus 8
# cmd + ctrl - 9 : yabai -m space --focus 9

# focus full screen alt-`
lalt - 0x32 : yabai -m space --focus \
    $(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == true).index)|.[0]') \
        || yabai -m space --focus recent
cmd + ctrl - d : yabai -m space --toggle show-desktop

# toggle padding
f16: yabai -m space --toggle padding

# focus previous window: there is no way to switch to recent floating window
# cmd - tab : yabai -m window --focus recent || yabai -m space --focus recent
cmd - f14 : yabai -m window --focus recent || yabai -m space --focus recent
f15 : yabai -m space --focus recent
# cycle through all windows in current space
cmd + ctrl - tab :  yabai -m window --focus $(yabai -m query --windows --space | jq 'map(select( .title != "Microsoft Teams Notification" and .scratchpad == "" )) | sort_by(.id) | reverse | .[map(."has-focus") | index(true)-1].id')
# reverse cycle through all windows in current space
cmd + ctrl + shift - tab :  yabai -m window --focus $(yabai -m query --windows --space | jq 'map(select( .title != "Microsoft Teams Notification" and .scratchpad == "" )) | sort_by(.id) | .[map(."has-focus") | index(true)-1].id')

## ctrl+pause to cycle through windows on the same spaces
ctrl - f14 :  yabai -m window --focus $(yabai -m query --windows --space | jq 'map(select( .title != "Microsoft Teams Notification" and .scratchpad == "" )) | sort_by(.id) | reverse | .[map(."has-focus") | index(true)-1].id')

## f15 is pause, f14 is screenlock
# lalt - tab : yabai -m space --toggle mission-control && cliclick -r w:150 m:0,0
## 0x32 is `
cmd + ctrl - 0x32 : yabai -m space --toggle mission-control && cliclick -r w:150 m:0,0

# ctrl - f13 : /Applications/flameshot.app/Contents/MacOS/flameshot gui
# shift - f13 : open -a flameshot --args screen
# }}}

# move window cmd + shift - ? {{{
cmd + shift - h : yabai -m window --swap west || begin; yabai -m window --display west ; yabai -m display --focus west; end
cmd + shift - j : yabai -m window --swap south || begin; yabai -m window --display south ; yabai -m display --focus south; end
cmd + shift - k : yabai -m window --swap north || begin; yabai -m window --display north ; yabai -m display --focus north; end
cmd + shift - l : yabai -m window --swap east || begin; yabai -m window --display east ; yabai -m display --focus east; end

cmd + shift - 1 : yabai -m window --space 1
cmd + shift - 2 : yabai -m window --space 2
cmd + shift - 3 : yabai -m window --space 3
cmd + shift - 4 : yabai -m window --space 4
cmd + shift - 5 : yabai -m window --space 5
cmd + shift - 6 : yabai -m window --space 6
cmd + shift - 7 : yabai -m window --space 7
cmd + shift - 8 : yabai -m window --space 8
cmd + shift - 9 : yabai -m window --space 9
cmd + shift - 0 : yabai -m window --space 10

# cmd + ctrl + shift - 1 : yabai -m window --space 11
# cmd + ctrl + shift - 2 : yabai -m window --space 12
# cmd + ctrl + shift - 3 : yabai -m window --space 13
# cmd + ctrl + shift - 4 : yabai -m window --space 14
# cmd + ctrl + shift - 5 : yabai -m window --space 15
# cmd + ctrl + shift - 6 : yabai -m window --space 16
# cmd + ctrl + shift - 7 : yabai -m window --space 17
# cmd + ctrl + shift - 8 : yabai -m window --space 18
# cmd + ctrl + shift - 9 : yabai -m window --space 19
# cmd + ctrl + shift - 0 : yabai -m window --space 10

## resize
cmd + ctrl + shift - k: yabai -m window --resize top:0:-10 || yabai -m window south --resize top:0:-10
cmd + ctrl + shift - j: yabai -m window --resize bottom:0:10 || yabai -m window north --resize bottom:0:10
cmd + ctrl + shift - h: yabai -m window --resize left:-10:0 || yabai -m window east --resize left:-10:0
cmd + ctrl + shift - l: yabai -m window --resize right:10:0 || yabai -m window west --resize right:10:0
# }}}

# warp & stack {{{

# warp window with alt
alt + cmd + shift - k : yabai -m window --warp north
alt + cmd + shift - j : yabai -m window --warp south
alt + cmd + shift - h : yabai -m window --warp west
alt + cmd + shift - l : yabai -m window --warp east

# stack similar to warp, add ctrl
alt + ctrl + shift - k: yabai -m window --stack north
alt + ctrl + shift - j: yabai -m window --stack south
alt + ctrl + shift - h: yabai -m window --stack west
alt + ctrl + shift - l: yabai -m window --stack east
# }}}

# layout {{{
#cmd - s : yabai -m space --layout stack
lcmd - e : [ $(yabai -m query --spaces --space | jq -re '.type') = 'bsp' ] && yabai -m space --layout stack || yabai -m space --layout bsp
cmd + shift - space : yabai -m window --toggle float; yabai -m window --grid 8:8:1:1:6:6
cmd + ctrl + shift - space : yabai -m window --toggle topmost

## fullscreen
cmd - f11 : yabai -m window --toggle native-fullscreen
ctrl + cmd - f : yabai -m window --toggle native-fullscreen

# ## flash window border for active window
# cmd + ctrl + shift - w : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
# ## 0x2F is dot
# cmd + ctrl + shift - 0x2F : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
## 0x4C is numpad Enter
0x4C : yabai -m window --focus mouse

## 0x18 is = ; 0x1B is -
cmd + shift - 0x18 : yabai -m space --balance y-axis
cmd + shift - 0x1B : yabai -m space --balance x-axis
# }}}

# ctrl + number forward as cmd + number to applications {{{
# _HACK_ to send ctrl + number as cmd + number to applications skipping existing mappings:
# 1. define default & capture mode
# :: default
# :: tabmode

# 2. define an impossible key to switch to capture mode
# hyper - 0x80 ; tabmode
# tabmode < hyper - 0x80 ; default
# cmd - x ; tabmode
# tabmode < cmd - x ; default

# 3. define ctrl + number to send mode switch key, send cmd + number, switch back
# ctrl - 1 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 1" ; skhd -k "hyper - 0x80"
# ctrl - 2 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 2" ; skhd -k "hyper - 0x80"
# ctrl - 3 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 3" ; skhd -k "hyper - 0x80"
# ctrl - 4 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 4" ; skhd -k "hyper - 0x80"
# ctrl - 5 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 5" ; skhd -k "hyper - 0x80"
# ctrl - 6 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 6" ; skhd -k "hyper - 0x80"
# ctrl - 7 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 7" ; skhd -k "hyper - 0x80"
# ctrl - 8 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 8" ; skhd -k "hyper - 0x80"
# ctrl - 9 : skhd -k "hyper - 0x80" ; skhd -k "cmd - 9" ; skhd -k "hyper - 0x80"
ctrl - 1 | cmd - 1
ctrl - 2 | cmd - 2
ctrl - 3 | cmd - 3
ctrl - 4 | cmd - 4
ctrl - 5 | cmd - 5
ctrl - 6 | cmd - 6
ctrl - 7 | cmd - 7
ctrl - 8 | cmd - 8
ctrl - 9 | cmd - 9
# }}}

# some common shortcuts conflicts with current mappings {{{
# ctrl + cmd - k : skhd -k "hyper - 0x80" ; skhd -k "cmd - k" ; skhd -k "hyper - 0x80"
ctrl + cmd - k | cmd - k
# }}}

# launch common apps {{{

cmd + ralt - r : yabai -m window --scratchpad recover
ralt - 0x32 : yabai -m window --toggle music || open -a "YT Music"
alt - return: yabai -m window --toggle tt || fish -c "kitty -o tab_bar_min_tabs=3 -o hide_window_decorations=false -d ~ -T 'T_T'"
alt - c: yabai -m window --toggle wechat || open -a "WeChat"
alt - a: yabai -m window --toggle whatsapp || open -a "WhatsApp"
alt - d: yabai -m window --toggle finder || open ~/Downloads
ralt - n: yabai -m window --toggle notes || open -a "Notes"
lalt - t: yabai -m window --toggle chatgpt || open -a "ChatGPT"

# switch to main first tmux listening to socket, if none, launch new one
ralt - t : kitty @ --to unix:/tmp/mykitty focus-window -m id:1 || \
    fish -c "kitty -1 --listen-on=unix:/tmp/mykitty -d ~ -o os_window_title=main"
    # fish -c "~/personal/kitty/kitty/launcher/kitty.app/Contents/MacOS/kitty -1 -d ~"
    # zsh -ci "kitty -1 -d ~"
        # zsh -c "source ~/.base16_theme; tmux new-session -A -s main"
# alt - f : kitty -d ~ --title 'MY-|-Filer' lf
# -1 option makes it very fast but makes -o option not work
ralt - f : fish -c "kitty -1 -d ~ -T 'MY-|-Filer' lf"
# ralt - f : fish -c "kitty -1 --instance-group lf -d ~ -T 'MY-|-Filer' -o tab_bar_min_tabs=2 lf"

cmd + shift - return : kitty -1 -d ~
# cmd + shift - return : zsh -ci "kitty -1 -d ~"
# cmd + ctrl - return : open -a "Google Chrome.app"
cmd + ctrl + shift - return : open ~
# ralt - w : open -a "Google Chrome.app"
# alt - f : open ~
ralt - m : open -a "Microsoft Outlook.app"
# cmd + ctrl + shift - return : kitty -1 -d ~ zsh -c "source ~/.base16_theme; ranger"
# }}}

# for this mac: need to be more like linux {{{
cmd + shift - x : yabai -m window --close

# uk keyboard Â§ to `
# 0x0A : skhd -t "`"
# shift - 0x0A : skhd -t "~"
# }}}

# editing remaps: more like linux {{{

# delete word
# ctrl - backspace : skhd -k "alt - backspace"
# ctrl - delete : skhd -k "alt - delete"
# # move word
# ctrl - left : skhd -k "alt - left"
# ctrl - right : skhd -k "alt - right"
# # select word
# ctrl + shift - left : skhd -k "alt + shift - left"
# ctrl + shift - right : skhd -k "alt + shift - right"

# delete word
ctrl - backspace [
    "kitty" ~
    "wezterm" ~
    *       | alt - backspace
]
ctrl - delete [
    "kitty" ~
    "wezterm" ~
    *       | alt - delete
]
# move word
# ctrl - left | alt - left
ctrl - left [
    "kitty" ~
    "wezterm" ~
    *       | alt - left
]
# ctrl - right | alt - right
ctrl - right [
    "kitty" ~
    "wezterm" ~
    # "Google Chrome" ~
    *       | alt - right
]
# select word
ctrl + shift - left | alt + shift - left
ctrl + shift - right | alt + shift - right

# Home & end hack
home [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd - left
]
end [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd - right
]
shift - home [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd + shift - left
]
shift - end [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd + shift - right
]
# ctrl + home/end hack
ctrl - home [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd - up
]
ctrl - end [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd - down
]
ctrl + shift - home [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd + shift - up
]
ctrl + shift - end [
    "kitty" ~
    "wezterm" ~
    "Google Chrome" ~
    *       | cmd + shift - down
]
# }}}

.blacklist [
    "dota2"
    "Microsoft Remote Desktop"
]

# focus on floating
# cmd + ctrl - a : yabai -m window --focus "$( yabai -m query --windows --space | jq -re "[sort_by(.id) | .[] | select(.floating == 1) | .id] | nth(1 + index($( yabai -m query --windows --window | jq '.id'))) // first")"

# fn - space to toggle
fn - space : ~/.local/bin/fntoggle

# reload yabai
# ctrl + shift + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
ctrl + shift + cmd - r : yabai --reload-service

# mac built-in keyboard {{{
fn - j | down
fn - k | up
fn - h | left
fn - l | right

fn + shift - j | shift - down
fn + shift - k | shift - up
fn + shift - h | shift - left
fn + shift - l | shift - right

fn + ctrl - j | alt - down
fn + ctrl - k | alt - up
fn + ctrl - h | alt - left
fn + ctrl - l | alt - right

fn + ctrl + shift - j | alt + shift - down
fn + ctrl + shift - k | alt + shift - up
fn + ctrl + shift - h | alt + shift - left
fn + ctrl + shift - l | alt + shift - right

fn - u | pagedown
fn - i | pageup
fn - y | home
fn - o | end
# }}}
