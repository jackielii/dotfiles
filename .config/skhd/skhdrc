# vim: set fdm=marker:
# Now using https://github.com/jackielii/skhd.zig for hotkeys

.SHELL "/bin/dash"

# Command definitions {{{
# Focus operations with placeholders
.define focus_direction : yabai -m window --focus {{1}} || yabai -m display --focus {{1}}
.define focus_stack_or_direction : yabai -m window --focus stack.{{1}} || yabai -m window --focus {{2}} || yabai -m display --focus {{2}} || yabai -m window --focus stack.{{3}}
.define cycle_visible: yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"

# Space focus operations
.define focus_space : yabai -m space --focus {{1}}

#

# Window movement operations
.define swap_or_display : yabai -m window --swap {{1}} || ( yabai -m window --display {{1}} ; yabai -m display --focus {{1}} )
.define move_to_space : yabai -m window --space {{1}}
.define move_window_rel : yabai -m window --move rel:{{1}}:{{2}}
.define move_window_left : yabai -m window --move abs:0:$(yabai -m query --windows --window | jq '.frame.y')  # Move to left edge
.define move_window_bot : yabai -m window --move abs:$(yabai -m query --windows --window | jq '.frame.x'):$(echo "$(yabai -m query --displays --display | jq '.frame.h') - $(yabai -m query --windows --window | jq '.frame.h')" | bc)  # Move to bottom edge
.define move_window_top : yabai -m window --move abs:$(yabai -m query --windows --window | jq '.frame.x'):0  # Move to top edge
.define move_window_right : yabai -m window --move abs:$(echo "$(yabai -m query --displays --display | jq '.frame.w') - $(yabai -m query --windows --window | jq '.frame.w')" | bc):$(yabai -m query --windows --window | jq '.frame.y')  # Move to right edge

# Window resize operations
.define resize_window : yabai -m window --resize {{1}}:{{2}}:{{3}}
.define resize_window_horizontal : yabai -m window --resize right:{{1}}:0 || yabai -m window --resize left:{{1}}:0
# .define resize_window_vertical : n={{1}}; nn={{1}}; [ $nn -le 0 ] && nn=$((-nn)); \
.define resize_window_vertical : yabai -m window --resize bottom:0:{{1}} || yabai -m window --resize top:0:{{1}}

# Warp and stack operations
.define warp_window : yabai -m window --warp {{1}}
.define stack_window : yabai -m window --stack {{1}}

# Layout operations
.define toggle_layout : [ $(yabai -m query --spaces --space | jq -re '.type') = 'bsp' ] && yabai -m space --layout stack || yabai -m space --layout bsp
.define toggle_float : yabai -m window --toggle float; yabai -m window --grid 8:8:1:1:6:6
.define switch_float_focus : [ $(yabai -m query --windows --window | jq -r '.["is-floating"]') = 'true' ] && yabai -m window --focus "$(yabai -m query --windows --space | jq -r 'map(select(.["is-floating"] == false and .["is-visible"] == true)) | first | .id')" || yabai -m window --focus "$(yabai -m query --windows --space | jq -r 'map(select(.["is-floating"] == true and .["is-visible"] == true)) | first | .id')"

# Window toggle operations
.define toggle_scratchpad : yabai -m window --toggle {{1}} || open -a "{{2}}"

# Focus cycling operations
.define cycle_windows_forward : yabai -m window --focus $(yabai -m query --windows --space | jq 'map(select( .title != "Microsoft Teams Notification" and .scratchpad == "" )) | sort_by(.id) | reverse | .[map(."has-focus") | index(true)-1].id')
.define cycle_windows_backward : yabai -m window --focus $(yabai -m query --windows --space | jq 'map(select( .title != "Microsoft Teams Notification" and .scratchpad == "" )) | sort_by(.id) | .[map(."has-focus") | index(true)-1].id')

# AnyBar indicator
.define anybar_color : echo -n "{{1}}" | nc -4u -w0 localhost 1738

# App launch operations
.define fish : fish -c '{{1}}'
# }}}

# Process groups {{{
.define native_apps ["kitty", "WezTerm"]
# }}}

# focus cmd - ? {{{
lcmd - h : @focus_direction("west")
lcmd - j : @focus_stack_or_direction("next", "south", "first")
lcmd - k : @focus_stack_or_direction("prev", "north", "last")
lcmd - l : @focus_direction("east")

cmd + ctrl - h : @focus_space("prev")
# cmd + ctrl - j : yabai -m window --insert south
# cmd + ctrl - k : yabai -m window --insert north
cmd + ctrl - l : @focus_space("next")

# cmd - h : yabai -m window --focus west \
#     || yabai -m display --focus west \
#     || yabai -m window --focus $( \
#         (yabai -m query --spaces --space next) \
#             | jq -re '.[] | select(."is-visible" == true)."last-window"')
# cmd - l : yabai -m window --focus east \
#     || yabai -m display --focus east \
#     || yabai -m window --focus $( \
#         (yabai -m query --spaces --display) \
#             | jq -re '.[] | select(."is-visible" == true)."first-window"')

# cmd + number is used in many applications. I have to get used to using ctrl
lcmd - 1 : @focus_space("1")
lcmd - 2 : @focus_space("2")
lcmd - 3 : @focus_space("3")
lcmd - 4 : @focus_space("4")
lcmd - 5 : @focus_space("5")
lcmd - 6 : @focus_space("6")
lcmd - 7 : @focus_space("7")
lcmd - 8 : @focus_space("8")
lcmd - 9 : @focus_space("9")

# cmd + ctrl - 1 : yabai -m space --focus 1
# cmd + ctrl - 2 : yabai -m space --focus 2
# cmd + ctrl - 3 : yabai -m space --focus 3
# cmd + ctrl - 4 : yabai -m space --focus 4
# cmd + ctrl - 5 : yabai -m space --focus 5
# cmd + ctrl - 6 : yabai -m space --focus 6
# cmd + ctrl - 7 : yabai -m space --focus 7
# cmd + ctrl - 8 : yabai -m space --focus 8
# cmd + ctrl - 9 : yabai -m space --focus 9

# focus full screen alt-`
lalt - 0x32 : yabai -m space --focus \
    $(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == true).index)|.[0]') \
        || yabai -m space --focus recent
cmd + ctrl - d : yabai -m space --toggle show-desktop

# toggle padding
f16: yabai -m space --toggle padding

# focus previous window: there is no way to switch to recent floating window
# cmd - tab : yabai -m window --focus recent || yabai -m space --focus recent
cmd - f14 : yabai -m window --focus recent || yabai -m space --focus recent
f15 : yabai -m space --focus recent
# cycle through all windows in current space
cmd + ctrl - tab : @cycle_windows_forward
# reverse cycle through all windows in current space
cmd + ctrl + shift - tab : @cycle_windows_backward

## ctrl+pause to cycle through windows on the same spaces
ctrl - f14 : @cycle_windows_forward

## f15 is pause, f14 is screenlock
# lalt - tab : yabai -m space --toggle mission-control && cliclick -r w:150 m:0,0
## 0x32 is `
cmd + ctrl - 0x32 : yabai -m space --toggle mission-control && cliclick -r w:150 m:0,0

# ctrl - f13 : /Applications/flameshot.app/Contents/MacOS/flameshot gui
# shift - f13 : open -a flameshot --args screen
# }}}

# move window cmd + shift - ? {{{
cmd + shift - h : @swap_or_display("west")
cmd + shift - j : @swap_or_display("south")
cmd + shift - k : @swap_or_display("north")
cmd + shift - l : @swap_or_display("east")

cmd + shift - 1 : @move_to_space("1")
cmd + shift - 2 : @move_to_space("2")
cmd + shift - 3 : @move_to_space("3")
cmd + shift - 4 : @move_to_space("4")
cmd + shift - 5 : @move_to_space("5")
cmd + shift - 6 : @move_to_space("6")
cmd + shift - 7 : @move_to_space("7")
cmd + shift - 8 : @move_to_space("8")
cmd + shift - 9 : @move_to_space("9")
cmd + shift - 0 : @move_to_space("10")

# cmd + ctrl + shift - 1 : yabai -m window --space 11
# cmd + ctrl + shift - 2 : yabai -m window --space 12
# cmd + ctrl + shift - 3 : yabai -m window --space 13
# cmd + ctrl + shift - 4 : yabai -m window --space 14
# cmd + ctrl + shift - 5 : yabai -m window --space 15
# cmd + ctrl + shift - 6 : yabai -m window --space 16
# cmd + ctrl + shift - 7 : yabai -m window --space 17
# cmd + ctrl + shift - 8 : yabai -m window --space 18
# cmd + ctrl + shift - 9 : yabai -m window --space 19
# cmd + ctrl + shift - 0 : yabai -m window --space 10

## resize
alt + ctrl + shift - h: @resize_window_horizontal("-50")
alt + ctrl + shift - j: @resize_window_vertical("50")
alt + ctrl + shift - k: @resize_window_vertical("-50")
alt + ctrl + shift - l: @resize_window_horizontal("50")

## move window
cmd + ctrl + shift - h : @move_window_rel("-50", "0")
cmd + ctrl + shift - j : @move_window_rel("0", "50")
cmd + ctrl + shift - k : @move_window_rel("0", "-50")
cmd + ctrl + shift - l : @move_window_rel("50", "0")
# }}}

# warp & stack {{{

# Define window management mode for warp/stack operations
# use anybar to indicate the mode: https://github.com/tonsky/AnyBar
:: winmode @ : @anybar_color("red")
:: default : @anybar_color("hollow")

# Enter window mode with meh + m
meh - m ; winmode
lalt - m ; winmode
winmode < escape ; default
winmode < return ; default
winmode < meh - m ; default
winmode < lalt - m ; default
winmode < cmd - tab ~
# winmode < q ; default : @move_window_left

# Focus operations - basic hjkl for focus
winmode < left : @focus_direction("west")
winmode < down : @focus_stack_or_direction("next", "south", "first")
winmode < up : @focus_stack_or_direction("prev", "north", "last")
winmode < right : @focus_direction("east")

# move
winmode < h : @move_window_rel("-50", "0")
winmode < j : @move_window_rel("0", "50")
winmode < k : @move_window_rel("0", "-50")
winmode < l : @move_window_rel("50", "0")
winmode < alt - h : @move_window_rel("-10", "0")
winmode < alt - j : @move_window_rel("0", "10")
winmode < alt - k : @move_window_rel("0", "-10")
winmode < alt - l : @move_window_rel("10", "0")

# Move window to edges - ctrl + arrow keys
# winmode < ctrl - left : @move_window_left
# winmode < ctrl - down : @move_window_bot
# winmode < ctrl - up : @move_window_top
# winmode < ctrl - right : @move_window_right
winmode < ctrl - h : @move_window_left
winmode < ctrl - j : @move_window_bot
winmode < ctrl - k : @move_window_top
winmode < ctrl - l : @move_window_right

# resize
winmode < shift - h : @resize_window_horizontal("-50")
winmode < shift - j : @resize_window_vertical("50")
winmode < shift - k : @resize_window_vertical("-50")
winmode < shift - l : @resize_window_horizontal("50")
winmode < alt + shift - h : @resize_window_horizontal("-10")
winmode < alt + shift - j : @resize_window_vertical("10")
winmode < alt + shift - k : @resize_window_vertical("-10")
winmode < alt + shift - l : @resize_window_horizontal("10")

# swap operations - shift + hjkl
winmode < shift - left : @swap_or_display("west")
winmode < shift - down : @swap_or_display("south")
winmode < shift - up : @swap_or_display("north")
winmode < shift - right : @swap_or_display("east")

# Warp operations - alt + shift + hjkl for warping
winmode < ctrl - left : @warp_window("west")
winmode < ctrl - down : @warp_window("south")
winmode < ctrl - up : @warp_window("north")
winmode < ctrl - right : @warp_window("east")

# Stack operations - ctrl + shift + hjkl for stacking
winmode < ctrl + shift - left : @stack_window("west")
winmode < ctrl + shift - down : @stack_window("south")
winmode < ctrl + shift - up : @stack_window("north")
winmode < ctrl + shift - right : @stack_window("east")

# Stack management shortcuts
# .define insert_window : yabai -m window --insert {{1}}
# winmode < left : @insert_window("west")
# winmode < down : @insert_window("south")
# winmode < up : @insert_window("north")
# winmode < right : @insert_window("east")
winmode < space : @toggle_float
winmode < s : yabai -m window --insert stack

winmode < n : yabai -m window --focus stack.next  # Navigate stack next
winmode < p : yabai -m window --focus stack.prev  # Navigate stack prev

# }}}

# layout {{{
#cmd - s : yabai -m space --layout stack
lcmd - e : @toggle_layout
cmd + shift - space : @toggle_float
# cmd + ctrl + shift - space : yabai -m window --toggle topmost

## fullscreen
cmd - f11 : yabai -m window --toggle native-fullscreen
ctrl + cmd - f : yabai -m window --toggle zoom-fullscreen
ctrl + shift + cmd - f : yabai -m window --toggle native-fullscreen

# ## flash window border for active window
# cmd + ctrl + shift - w : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
# ## 0x2F is dot
# cmd + ctrl + shift - 0x2F : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
## 0x4C is numpad Enter
0x4C : yabai -m window --focus mouse

## 0x18 is = ; 0x1B is -
cmd + shift - 0x18 : yabai -m space --balance y-axis
cmd + shift - 0x1B : yabai -m space --balance x-axis

# # cycle all windows on space backwards by coordinate
# meh - m : yabai -m window --focus "$(yabai -m query --windows --space | jq -re "[sort_by(.id, .frame) | reverse | .[] | select(.role == \"AXWindow\" and .subrole == \"AXStandardWindow\") | .id] | nth(index($(yabai -m query --windows --window | jq -re ".id")) - 1)")"
#
# # cycle all windows on space backwards by coordinate
# meh - n : yabai -m window --focus "$(yabai -m query --windows --space | jq -re "[sort_by(.id, .frame) | .[] | select(.role == \"AXWindow\" and .subrole == \"AXStandardWindow\") | .id] | nth(index($(yabai -m query --windows --window | jq -re ".id")) - 1)")"
#
# # cycle through all windows sorted by: coordinates -> space index -> display index
# meh - v : yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"
# cycle through all visible windows sorted by: coordinates -> display index
# cmd + ctrl - space : @cycle_visible
# cmd - space : @cycle_visible
cmd - space : @switch_float_focus
cmd - g : @cycle_visible

# }}}

# some common shortcuts conflicts with current mappings {{{
# ctrl + cmd - k : skhd -k "hyper - 0x80" ; skhd -k "cmd - k" ; skhd -k "hyper - 0x80"
ctrl + cmd - k | cmd - k
# }}}

# launch common apps {{{

cmd + ralt - r : yabai -m window --scratchpad recover
ralt - 0x32 : @toggle_scratchpad("music", "YouTube Music")
# alt - return: yabai -m window --toggle tt || fish -c "kitty -o tab_bar_min_tabs=3 -o hide_window_decorations=false -d ~ -T 'T_T'"
ralt - return: @fish("cd ~ && kitten quick-access-terminal -o os_window_title=main -o lines=35")
lalt - c: @toggle_scratchpad("wechat", "WeChat")
alt - g: @toggle_scratchpad("ghostty", "ghostty")
alt - a: @toggle_scratchpad("whatsapp", "WhatsApp")
alt - d: yabai -m window --toggle finder || open ~/Downloads
ralt - n: @toggle_scratchpad("notes", "Notes")
lalt - t: @toggle_scratchpad("claude", "Claude")
ralt - p: @toggle_scratchpad("skype", "Skype")

# switch to main first tmux listening to socket, if none, launch new one
ralt - t : kitty @ --to unix:/tmp/mykitty focus-window -m id:1 || \
    fish -c "kitty -1 --listen-on=unix:/tmp/mykitty -d ~ --session=~/.local/share/kitty/sessions/main.session"
    # fish -c "~/personal/kitty/kitty/launcher/kitty.app/Contents/MacOS/kitty -1 -d ~"
    # zsh -ci "kitty -1 -d ~"
        # zsh -c "source ~/.base16_theme; tmux new-session -A -s main"
# alt - f : kitty -d ~ --title 'MY-|-Filer' lf
# -1 option makes it very fast but makes -o option not work
ralt - f : @fish("kitty -1 -d ~ -T \"MY-|-Filer\" -o os_window_name=lf -o os_window_title=lf lf")
# ralt - f : fish -c "kitty -1 --instance-group lf -d ~ -T 'MY-|-Filer' -o tab_bar_min_tabs=2 lf"

cmd + shift - return : kitty -1 -d ~
# cmd + shift - return : zsh -ci "kitty -1 -d ~"
# cmd + ctrl - return : open -a "Google Chrome.app"
cmd + ctrl + shift - return : open ~
# ralt - w : open -a "Google Chrome.app"
# alt - f : open ~
# ralt - m : open -a "Microsoft Outlook.app"
# cmd + ctrl + shift - return : kitty -1 -d ~ zsh -c "source ~/.base16_theme; ranger"
cmd + shift - x : yabai -m window --close
# }}}


# common ctr - number to cmd - number {{{
ctrl - 1 | cmd - 1
ctrl - 2 | cmd - 2
ctrl - 3 | cmd - 3
ctrl - 4 | cmd - 4
ctrl - 5 | cmd - 5
ctrl - 6 | cmd - 6
ctrl - 7 | cmd - 7
ctrl - 8 | cmd - 8
ctrl - 9 | cmd - 9
# }}}

# editing remaps: more like linux {{{

# delete word
ctrl - backspace [
    @native_apps ~
    *              | alt - backspace
]
ctrl - delete [
    @native_apps ~
    *              | alt - delete
]

# move word
ctrl - left [
    @native_apps ~
    *              | alt - left
]
ctrl - right [
    @native_apps ~
    *              | alt - right
]

# select word
ctrl + shift - left | alt + shift - left
ctrl + shift - right | alt + shift - right

# Home & end hack
home [
    @native_apps ~
    *              | cmd - left
]
end [
    @native_apps  ~
    *              | cmd - right
]

shift - home [
    @native_apps ~
    *            | cmd + shift - left
]
shift - end [
    @native_apps ~
    *            | cmd + shift - right
]

# ctrl + home/end hack
ctrl - home [
    @native_apps ~
    *            | cmd - up
]
ctrl - end [
    @native_apps ~
    *            | cmd - down
]

ctrl + shift - home [
    @native_apps ~
    *            | cmd + shift - up
]
ctrl + shift - end [
    @native_apps ~
    *            | cmd + shift - down
]
# }}}

.blacklist [
    "dota2"
    "dota 2"
    "Microsoft Remote Desktop"
]

# focus on floating
# cmd + ctrl - a : yabai -m window --focus "$( yabai -m query --windows --space | jq -re "[sort_by(.id) | .[] | select(.floating == 1) | .id] | nth(1 + index($( yabai -m query --windows --window | jq '.id'))) // first")"

# fn - space to toggle
fn - space : ~/.local/bin/fntoggle

# reload yabai
# ctrl + shift + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
ctrl + shift + cmd - r : yabai --restart-service

# mac built-in keyboard {{{
# § -> ` and shift - § -> ~
0xa | 0x32
shift - 0xa | shift - 0x32

fn - j | down
fn - k | up
fn - h | left
fn - l | right

fn + shift - j | shift - down
fn + shift - k | shift - up
fn + shift - h | shift - left
fn + shift - l | shift - right

fn + ctrl - j | ctrl - down
fn + ctrl - k | ctrl - up
fn + ctrl - h | ctrl - left
fn + ctrl - l | ctrl - right

fn + alt - j | alt - down
fn + alt - k | alt - up
fn + alt - h | alt - left
fn + alt - l | alt - right

fn + ctrl + shift - j | ctrl + shift - down
fn + ctrl + shift - k | ctrl + shift - up
fn + ctrl + shift - h | ctrl + shift - left
fn + ctrl + shift - l | ctrl + shift - right

fn - u | pagedown
fn - i | pageup
fn - y | home
fn - o | end

fn + shift - u | shift - pagedown
fn + shift - i | shift - pageup
fn + shift - y | shift - home
fn + shift - o | shift - end

fn + cmd - j | cmd - down
fn + cmd - k | cmd - up
fn + cmd - h | cmd - left
fn + cmd - l | cmd - right
# }}}

# for claude code: 
shift - return [
    "kitty" | alt - return
    "WezTerm" | alt - return
    "Ghostty" | alt - return
    *       ~
]
