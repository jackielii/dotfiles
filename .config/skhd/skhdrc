# ( vim: set ts=4 sw=4 et fdm=marker: )
# keys: https://github.com/koekeishiya/skhd/issues/1#issue-248494406
# example: https://github.com/koekeishiya/skhd/blob/master/examples/skhdrc
# {{{ README
# Usage:
# -V | --verbose: Output debug information
#     skhd -V
#
# -P | --profile: Output profiling information
#     skhd -P
#
# -v | --version: Print version number to stdout
#     skhd -v
#
# -c | --config: Specify location of config file
#     skhd -c ~/.skhdrc
#
# -o | --observe: Output keycode and modifiers of event. Ctrl+C to quit
#     skhd -o
#
# -r | --reload: Signal a running instance of skhd to reload its config file
#     skhd -r
#
# -h | --no-hotload: Disable system for hotloading config file
#     skhd -h
#
# -k | --key: Synthesize a keypress (same syntax as when defining a hotkey)
#     skhd -k "shift + alt - 7"
#
# -t | --text: Synthesize a line of text
#     skhd -t "hello, worldã‚·"
#
#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.
##############################################################################
# modifiers (<mod>):
# fn
#
# cmd
# lcmd
# rcmd
#
# shift
# lshift
# rshift
#
# alt
# lalt
# ralt
#
# ctrl
# lctrl
# rctrl
#
# hyper (cmd + shift + alt + ctrl)
#
# meh (shift + alt + ctrl)
##############################################################################
# Key literals
# "return"     (kVK_Return)
# "tab"        (kVK_Tab)
# "space"      (kVK_Space)
# "backspace"  (kVK_Delete)
# "escape"     (kVK_Escape)
#
# The following keys can not be used with the fn-modifier:
#
# "delete"     (kVK_ForwardDelete)
# "home"       (kVK_Home)
# "end"        (kVK_End)
# "pageup"     (kVK_PageUp)
# "pagedown"   (kVK_PageDown)
# "insert"     (kVK_Help)
# "left"       (kVK_LeftArrow)
# "right"      (kVK_RightArrow)
# "up"         (kVK_UpArrow)
# "down"       (kVK_DownArrow)
# "f1"         (kVK_F1)
# "f2"         (kVK_F2)
# "f3"         (kVK_F3)
# "f4"         (kVK_F4)
# "f5"         (kVK_F5)
# "f6"         (kVK_F6)
# "f7"         (kVK_F7)
# "f8"         (kVK_F8)
# "f9"         (kVK_F9)
# "f10"        (kVK_F10)
# "f11"        (kVK_F11)
# "f12"        (kVK_F12)
# "f13"        (kVK_F13)
# "f14"        (kVK_F14)
# "f15"        (kVK_F15)
# "f16"        (kVK_F16)
# "f17"        (kVK_F17)
# "f18"        (kVK_F18)
# "f19"        (kVK_F19)
# "f20"        (kVK_F20)
#
# "sound_up"          (NX_KEYTYPE_SOUND_UP)
# "sound_down"        (NX_KEYTYPE_SOUND_DOWN)
# "mute"              (NX_KEYTYPE_MUTE)
# "play"              (NX_KEYTYPE_PLAY)
# "previous"          (NX_KEYTYPE_PREVIOUS)
# "next"              (NX_KEYTYPE_NEXT)
# "rewind"            (NX_KEYTYPE_REWIND)
# "fast"              (NX_KEYTYPE_FAST)
# "brightness_up"     (NX_KEYTYPE_BRIGHTNESS_UP)
# "brightness_down"   (NX_KEYTYPE_BRIGHTNESS_DOWN)
# "illumination_up"   (NX_KEYTYPE_ILLUMINATION_UP)
# "illumination_down" (NX_KEYTYPE_ILLUMINATION_DOWN)
# }}}

# focus cmd - ? {{{
cmd - h : yabai -m window --focus west || yabai -m display --focus west
cmd - j : yabai -m window --focus stack.next || yabai -m window --focus south  || $(yabai -m display --focus south) || yabai -m window --focus stack.first
cmd - k : yabai -m window --focus stack.prev || yabai -m window --focus north  || $(yabai -m display --focus north) || yabai -m window --focus stack.last
cmd - l : yabai -m window --focus east || yabai -m display --focus east

cmd + ctrl - h : yabai -m space --focus prev
# cmd + ctrl - j : yabai -m window --insert south
# cmd + ctrl - k : yabai -m window --insert north
cmd + ctrl - l : yabai -m space --focus next

# cmd - h : yabai -m window --focus west \
#     || yabai -m display --focus west \
#     || yabai -m window --focus $( \
#         (yabai -m query --spaces --space next) \
#             | jq -re '.[] | select(."is-visible" == true)."last-window"')
# cmd - l : yabai -m window --focus east \
#     || yabai -m display --focus east \
#     || yabai -m window --focus $( \
#         (yabai -m query --spaces --display) \
#             | jq -re '.[] | select(."is-visible" == true)."first-window"')

cmd - 1 : yabai -m space --focus 1
cmd - 2 : yabai -m space --focus 2
cmd - 3 : yabai -m space --focus 3
cmd - 4 : yabai -m space --focus 4
cmd - 5 : yabai -m space --focus 5
cmd - 6 : yabai -m space --focus 6
cmd - 7 : yabai -m space --focus 7
cmd - 8 : yabai -m space --focus 8
cmd - 9 : yabai -m space --focus 9

cmd + ctrl - 1 : yabai -m space --focus 11
cmd + ctrl - 2 : yabai -m space --focus 12
cmd + ctrl - 3 : yabai -m space --focus 13
cmd + ctrl - 4 : yabai -m space --focus 14
cmd + ctrl - 5 : yabai -m space --focus 15
cmd + ctrl - 6 : yabai -m space --focus 16
cmd + ctrl - 7 : yabai -m space --focus 17
cmd + ctrl - 8 : yabai -m space --focus 18
cmd + ctrl - 9 : yabai -m space --focus 19

# focus full screen
cmd - 0: yabai -m space --focus \
    $(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == true).index)|.[0]')

# }}}

# move window cmd + shift - ? {{{
cmd + shift - h : yabai -m window --swap west || $(yabai -m window --display west; yabai -m display --focus west)
cmd + shift - j : yabai -m window --swap south || $(yabai -m window --display south; yabai -m display --focus south)
cmd + shift - k : yabai -m window --swap north || $(yabai -m window --display north; yabai -m display --focus north)
cmd + shift - l : yabai -m window --swap east || $(yabai -m window --display east; yabai -m display --focus east)

cmd + shift - 1 : yabai -m window --space 1
cmd + shift - 2 : yabai -m window --space 2
cmd + shift - 3 : yabai -m window --space 3
cmd + shift - 4 : yabai -m window --space 4
cmd + shift - 5 : yabai -m window --space 5
cmd + shift - 6 : yabai -m window --space 6
cmd + shift - 7 : yabai -m window --space 7
cmd + shift - 8 : yabai -m window --space 8
cmd + shift - 9 : yabai -m window --space 9
cmd + shift - 0 : yabai -m window --space 10

cmd + ctrl + shift - 1 : yabai -m window --space 11
cmd + ctrl + shift - 2 : yabai -m window --space 12
cmd + ctrl + shift - 3 : yabai -m window --space 13
cmd + ctrl + shift - 4 : yabai -m window --space 14
cmd + ctrl + shift - 5 : yabai -m window --space 15
cmd + ctrl + shift - 6 : yabai -m window --space 16
cmd + ctrl + shift - 7 : yabai -m window --space 17
cmd + ctrl + shift - 8 : yabai -m window --space 18
cmd + ctrl + shift - 9 : yabai -m window --space 19
cmd + ctrl + shift - 0 : yabai -m window --space 10

## resize
cmd + ctrl + shift - k: yabai -m window --resize top:0:-10 || yabai -m window south --resize top:0:-10
cmd + ctrl + shift - j: yabai -m window --resize bottom:0:10 || yabai -m window north --resize bottom:0:10
cmd + ctrl + shift - h: yabai -m window --resize left:-10:0 || yabai -m window east --resize left:-10:0
cmd + ctrl + shift - l: yabai -m window --resize right:10:0 || yabai -m window west --resize right:10:0
# }}}

# warp & stack (always with arrow keys) {{{

# warp window (similar to move but with arrow); further warp stacks
# cmd + shift - up : yabai -m window --warp north || $(yabai -m window --stack south)
# cmd + shift - down : yabai -m window --warp south || $(yabai -m window --stack north)
# cmd + shift - left : yabai -m window --warp west || $(yabai -m window --stack east)
# cmd + shift - right : yabai -m window --warp east || $(yabai -m window --stack west)

# stack similar to warp, add ctrl
# cmd + ctrl + shift - up: yabai -m window --stack north
# cmd + ctrl + shift - down: yabai -m window --stack south
# cmd + ctrl + shift - left: yabai -m window --stack west
# cmd + ctrl + shift - right: yabai -m window --stack east
# }}}

# layout {{{
#cmd - s : yabai -m space --layout stack
cmd - e : [ $(yabai -m query --spaces --space | jq -re '.type') = 'bsp' ] && yabai -m space --layout stack || yabai -m space --layout bsp
cmd + shift - space : yabai -m window --toggle float; yabai -m window --grid 4:4:1:1:2:2
cmd + ctrl + shift - space : yabai -m space --rotate 270

## fullscreen
cmd - f11 : yabai -m window --toggle native-fullscreen
ctrl + cmd - f : yabai -m window --toggle native-fullscreen

f15 : yabai -m space --toggle mission-control && cliclick -r w:200 m:0,0 # f15 is pause
## flash window border for active window
cmd + ctrl + shift - w : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
## 0x2F is dot
cmd + ctrl + shift - 0x2F : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
## f15 is Pause
cmd - f15 : yabai -m window --toggle border; sleep 0.5; yabai -m config window_border off
## 0x4C is Enter
0x4C : yabai -m window --focus mouse

## 0x18 is =
cmd + shift - 0x18 : yabai -m space --balance y-axis
cmd + ctrl + shift - 0x18 : yabai -m space --balance x-axis
# }}}

# launch common apps {{{

# switch to main first tmux listening to socket, if none, launch new one
# f14 : yabai -m space --toggle mission-control && cliclick -r w:200 m:0,0 # f14 is scrlock
# f14 : HHKB: FN+T
f14 : kitty @ --to unix:/tmp/mykitty focus-window -m id:1 || \
    kitty --listen-on=unix:/tmp/mykitty -d ~ \
        zsh -c "source ~/.base16_theme; tmux attach"
cmd + shift - return : kitty -d ~
cmd + ctrl - return : open "/Applications/Google Chrome.app"
cmd + ctrl + shift - return : open ~
cmd - m : open -a "Microsoft Outlook.app"
# cmd + ctrl + shift - return : kitty -1 -d ~ zsh -c "source ~/.base16_theme; ranger"
# }}}

# for this mac: need to be more like linux {{{
cmd + shift - x : yabai -m window --close
# uk keyboard Â§ to `
# 0x0A : skhd -t "`"
# shift - 0x0A : skhd -t "~"
# }}}

# editing remaps: more like linux {{{

# delete word
ctrl - backspace : skhd -k "alt - backspace"
# move word
ctrl - left : skhd -k "alt - left"
ctrl - right : skhd -k "alt - right"
# select word
ctrl + shift - left : skhd -k "alt + shift - left"
ctrl + shift - right : skhd -k "alt + shift - right"

# Home & end hack
home [
    "kitty" ~
    *       : skhd -k "cmd - left"
]
end [
    "kitty" ~
    *       : skhd -k "cmd - right"
]
shift - home [
    "kitty" ~
    *       : skhd -k "cmd + shift - left"
]
shift - end [
    "kitty" ~
    *       : skhd -k "cmd + shift - right"
]
# ctrl + home/end hack
ctrl - home [
    "kitty" ~
    *       : skhd -k "cmd - up"
]
ctrl - end [
    "kitty" ~
    *       : skhd -k "cmd - down"
]
ctrl + shift - home [
    "kitty" ~
    *       : skhd -k "cmd + shift - up"
]
ctrl + shift - end [
    "kitty" ~
    *       : skhd -k "cmd + shift - down"
]
# }}}

# focus on floating
# cmd + ctrl - a : yabai -m window --focus "$( yabai -m query --windows --space | jq -re "[sort_by(.id) | .[] | select(.floating == 1) | .id] | nth(1 + index($( yabai -m query --windows --window | jq '.id'))) // first")"

# reload yabai
ctrl + shift + cmd - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"
