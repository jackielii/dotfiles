# single column on small panes
$[ $lf_width -le 80 ] && lf -remote "send $id :set preview!; set ratios 1" || exit 0

set shell sh
set sortby natural
set reverse
set icons on
set incsearch
set incfilter
set scrolloff 10
set promptfmt "\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m" # remove file name

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/clean
map i preview

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

map R :reload; recol

map gh cd ~
map gd cd ~/Downloads
map gs cd ~/Documents
map gp cd ~/personal
map gn cd ~/personal/notes
map gw cd ~/work
map ga cd /Applications
map gc cd ~/.config

map xz zip
map xt tar
map xx extract

map o $open $f
map O $open -R $f
map Q $lf -remote "send quit" # close all window

map y
map yy copy
map yp $printf "%s" "$fx" | pbcopy       # full path
map yn $printf "%s" "${fx##*/}" | pbcopy # filename
map yd $printf "%s" "${fx%/*}" | pbcopy  # dirname

map d
map dd cut
map dD delete
map DD trash
map dT trash
map p
map pp paste

map F fzf_jump
map f
map fa fzf_search_all
map fg push :fzf_grep<space>
map ff setfilter
map f<space> filter
map fz fzf_jump
map <c-p> fzf_jump

map a push :mkdir<space>
map E push $$EDITOR<space>
map <backspace2> updir # somehow backspace2 is actual backspace on HHKB, <c-h> is <backspace>

map l lfopen
map <enter> open
map z<space> push :z<space>
map <c-c> :redraw; reload
map <tab> :toggle; down
map <space> quicklook
map <delete> delete
map <c-c> clear
map ?
map ?? list-maps
map ?s list-selections
map ?b list-buffers

map +x chmod +x
map +w chmod +w
map +r chmod +r
map -x chmod -x
map -w chmod -w
map -r chmod -r

cmd chmod ${{
	[ $# -ne 1 ] && exit
	eval "chmod u$1 '$f'"
	lf -remote "send $id reload"
}}

cmd quicklook &{{
    qlmanage -p $f &>/dev/null
}}

cmd lfopen ${{
    if [ -d "$f" ]; then
        lf -remote "send $id cd '$f'"
    elif [ -f "$f" ]; then
        ~/.config/lf/preview "$f"
    fi
}}

cmd preview ${{
    if [[ -f "$f" ]]; then
        ~/.config/lf/preview "$f"
    elif [[ -d "$f" ]]; then
        ls -lh --color=always "$f" | less -R
    fi
}}

cmd trash $trash -F $fx # trash installed via brew install trash

cmd delete ${{
    set -f
    printf "$fx\n\n"
    printf "Delete? [y/N]"
    read -n1 ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

cmd deleteImmediately ${{
	rm -rf $fx
}}

cmd recol ${{
    if [ $lf_width -le 80 ]; then # small window
        lf -remote "send $id :set preview!; set ratios 1"
        # I think there is a bug: https://github.com/gokcehan/lf/issues/825
        # lf -remote "send $id :set preview off; set ratios 1"
    elif [ $lf_ratios != "1:2:3" -o $lf_preview != "true" ]; then # if not already 3 column mode
        lf -remote "send $id set ratios 1:2:3; set preview"
        # lf -remote "send $id set preview on; set ratios 1:2:3"
    fi
}}
# TODO: add mapping to toggle recolumn

cmd on-quit ${{
    # replace or append ' register
    ~/.config/lf/mark-on-quit.go "${f%/*}"
    # marks=$HOME/.local/share/lf/marks
    # grep -q -e "^':.*$" $marks
    # if [ $? -eq 0 ]; then
    #     # BSD sed doesn't support -i without an extension
    #     sed -i '' "/^':.*$/d" $marks
    # fi
    # echo "':${f%/*}" >> $marks
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    dir=${f%/*}
    dir=${dir##*/}
    set -f
    tar czf "${dir}.tar.gz" $fx
}}

# compress current file or selected files with zip
cmd zip ${{
    dir=${f%/*}
    dir=${dir##*/}
    set -f
    zip -r "${dir}.zip" $fx
}}

cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd \"$result\""
}}

cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

cmd fzf_jump ${{
    res="$(fd . -H -I -d 6 -E .git -E node_modules | fzf +m | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search_all ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --ansi --bind "change:reload:$RG_PREFIX {q} || true" \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd fzf_grep ${{
    res="$( \
        rg --column --line-number --no-heading --color=always --smart-case -e "$*"| \
        fzf --ansi | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
